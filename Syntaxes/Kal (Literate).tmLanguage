<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>Kal (Literate)</string>
	<key>fileTypes</key>
	<array>
		<string>litkal</string>
		<string>kal.md</string>
	</array>
	<key>foldingStartMarker</key>
	<string>(?x)
		(&lt;(?i:head|body|table|thead|tbody|tfoot|tr|div|select|fieldset|style|script|ul|ol|form|dl)\b.*?&gt;
		|&lt;!--(?!.*--&gt;)
		|\{\s*($|\?&gt;\s*$|//|/\*(.*\*/\s*$|(?!.*?\*/)))
		)</string>
	<key>foldingStopMarker</key>
	<string>(?x)
		(&lt;/(?i:head|body|table|thead|tbody|tfoot|tr|div|select|fieldset|style|script|ul|ol|form|dl)&gt;
		|^\s*--&gt;
		|(^|\s)\}
		)</string>
	<key>name</key>
	<string>Kal (Literate)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>(?x)^
				(?=	([ ]{4}|\t)(?!$))</string>
			<key>end</key>
			<string>(?x)^
				(?!	([ ]{4}|\t))</string>
			<key>name</key>
			<string>markup.raw.block.markdown</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_raw</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)^
				(?=	[ ]{,3}&gt;.
				|	[#]{1,6}\s*+
				|	[ ]{,3}(?&lt;marker&gt;[-*_])([ ]{,2}\k&lt;marker&gt;){2,}[ \t]*+$
				)</string>
			<key>comment</key>
			<string>
				We could also use an empty end match and set
				applyEndPatternLast, but then we must be sure that the begin
				pattern will only match stuff matched by the sub-patterns.
			</string>
			<key>end</key>
			<string>(?x)^
				(?!	[ ]{,3}&gt;.
				|	[#]{1,6}\s*+
				|	[ ]{,3}(?&lt;marker&gt;[-*_])([ ]{,2}\k&lt;marker&gt;){2,}[ \t]*+$
				)</string>
			<key>name</key>
			<string>meta.block-level.markdown</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_quote</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#heading</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#separator</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^[ ]{0,3}([*+-])(?=\s)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.list_item.markdown</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^(?=\S)</string>
			<key>name</key>
			<string>markup.list.unnumbered.markdown</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#list-paragraph</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^[ ]{0,3}([0-9]+\.)(?=\s)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.list_item.markdown</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^(?=\S)</string>
			<key>name</key>
			<string>markup.list.numbered.markdown</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#list-paragraph</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(?=&lt;(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b)(?!.*?&lt;/\1&gt;)</string>
			<key>comment</key>
			<string>
				Markdown formatting is disabled inside block-level tags.
			</string>
			<key>end</key>
			<string>(?&lt;=^&lt;/\1&gt;$\n)</string>
			<key>name</key>
			<string>meta.disable-markdown</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>text.html.basic</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(?=&lt;(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b)</string>
			<key>comment</key>
			<string>Same rule but for one line disables.</string>
			<key>end</key>
			<string>$\n?</string>
			<key>name</key>
			<string>meta.disable-markdown</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>text.html.basic</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.markdown</string>
				</dict>
				<key>10</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.markdown</string>
				</dict>
				<key>11</key>
				<dict>
					<key>name</key>
					<string>string.other.link.description.title.markdown</string>
				</dict>
				<key>12</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.markdown</string>
				</dict>
				<key>13</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.markdown</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>constant.other.reference.link.markdown</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.markdown</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.key-value.markdown</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.link.markdown</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>markup.underline.link.markdown</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.link.markdown</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>string.other.link.description.title.markdown</string>
				</dict>
				<key>9</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.markdown</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x:
				\s*						# Leading whitespace
				(\[)(.+?)(\])(:)		# Reference name
				[ \t]*					# Optional whitespace
				(&lt;?)(\S+?)(&gt;?)			# The url
				[ \t]*					# Optional whitespace
				(?:
					  ((\().+?(\)))		# Match title in quotes…
					| ((").+?("))		# or in parens.
				)?						# Title is optional
				\s*						# Optional whitespace
				$
			)</string>
			<key>name</key>
			<string>meta.link.reference.def.markdown</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^(?=\S)(?![=-]{3,}(?=$))</string>
			<key>end</key>
			<string>^(?:\s*$|(?=[ ]{,3}&gt;.))|(?=[ \t]*\n)(?&lt;=^===|^====|=====|^---|^----|-----)[ \t]*\n|(?=^#)</string>
			<key>name</key>
			<string>meta.paragraph.markdown</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#inline</string>
				</dict>
				<dict>
					<key>include</key>
					<string>text.html.basic</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.heading.markdown</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(={3,})(?=[ \t]*$)</string>
					<key>name</key>
					<string>markup.heading.1.markdown</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.heading.markdown</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(-{3,})(?=[ \t]*$)</string>
					<key>name</key>
					<string>markup.heading.2.markdown</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>ampersand</key>
		<dict>
			<key>comment</key>
			<string>
				Markdown will convert this for us. We match it so that the
				HTML grammar will not mark it up as invalid.
			</string>
			<key>match</key>
			<string>&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)</string>
			<key>name</key>
			<string>meta.other.valid-ampersand.markdown</string>
		</dict>
		<key>block_quote</key>
		<dict>
			<key>begin</key>
			<string>\G[ ]{,3}(&gt;)(?!$)[ ]?</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.blockquote.markdown</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>
				We terminate the block quote when seeing an empty line, a
				separator or a line with leading &gt; characters. The latter is
				to “reset” the quote level for quoted lines.
			</string>
			<key>end</key>
			<string>(?x)^
				(?=	\s*$
				|	[ ]{,3}(?&lt;marker&gt;[-*_])([ ]{,2}\k&lt;marker&gt;){2,}[ \t]*+$
				|	[ ]{,3}&gt;.
				)</string>
			<key>name</key>
			<string>markup.quote.markdown</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)\G
						(?=	[ ]{,3}&gt;.
						)</string>
					<key>end</key>
					<string>^</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#block_quote</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(?x)\G
						(?=	([ ]{4}|\t)
						|	[#]{1,6}\s*+
						|	[ ]{,3}(?&lt;marker&gt;[-*_])([ ]{,2}\k&lt;marker&gt;){2,}[ \t]*+$
						)</string>
					<key>end</key>
					<string>^</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#block_raw</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#heading</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#separator</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)\G
						(?!	$
						|	[ ]{,3}&gt;.
						|	([ ]{4}|\t)
						|	[#]{1,6}\s*+
						|	[ ]{,3}(?&lt;marker&gt;[-*_])([ ]{,2}\k&lt;marker&gt;){2,}[ \t]*+$
						)</string>
					<key>end</key>
					<string>$|(?&lt;=\n)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#inline</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>block_raw</key>
		<dict>
			<key>name</key>
			<string>markup.raw.block.markdown</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#Kal</string>
				</dict>
			</array>
		</dict>
		<key>bold</key>
		<dict>
			<key>begin</key>
			<string>(?x)
						(\*\*|__)(?=\S)								# Open
						(?=
							(
							    &lt;[^&gt;]*+&gt;							# HTML tags
							  | (?&lt;raw&gt;`+)([^`]|(?!(?&lt;!`)\k&lt;raw&gt;(?!`))`)*+\k&lt;raw&gt;
																	# Raw
							  | \\[\\`*_{}\[\]()#.!+\-&gt;]?+			# Escapes
							  | \[
								(				
								        (?&lt;square&gt;					# Named group
											[^\[\]\\]				# Match most chars
								          | \\.						# Escaped chars
								          | \[ \g&lt;square&gt;*+ \]		# Nested brackets
								        )*+
									\]
									(
										(							# Reference Link
											[ ]?					# Optional space
											\[[^\]]*+\]				# Ref name
										)
									  | (							# Inline Link
											\(						# Opening paren
												[ \t]*+				# Optional whtiespace
												&lt;?(.*?)&gt;?			# URL
												[ \t]*+				# Optional whtiespace
												(					# Optional Title
													(?&lt;title&gt;['"])
													(.*?)
													\k&lt;title&gt;
												)?
											\)
										)
									)
								)
							  | (?!(?&lt;=\S)\1).						# Everything besides
																	# style closer
							)++
							(?&lt;=\S)\1								# Close
						)
					</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.bold.markdown</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\S)(\1)</string>
			<key>name</key>
			<string>markup.bold.markdown</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(?=&lt;[^&gt;]*?&gt;)</string>
					<key>end</key>
					<string>(?&lt;=&gt;)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>text.html.basic</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#escape</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ampersand</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#bracket</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#raw</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#italic</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#image-inline</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-inline</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-inet</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-email</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#image-ref</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-ref-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-ref</string>
				</dict>
			</array>
		</dict>
		<key>bracket</key>
		<dict>
			<key>comment</key>
			<string>
				Markdown will convert this for us. We match it so that the
				HTML grammar will not mark it up as invalid.
			</string>
			<key>match</key>
			<string>&lt;(?![a-z/?\$!])</string>
			<key>name</key>
			<string>meta.other.valid-bracket.markdown</string>
		</dict>
		<key>Kal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.kal</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.kal</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>match stuff like: a -&gt; … </string>
					<key>match</key>
					<string>(\([^()]*?\))\s*([=-]&gt;)</string>
					<key>name</key>
					<string>meta.inline.function.kal</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.new.kal</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.instance.kal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(new)\s+(\w+(?:\.\w*)*)</string>
					<key>name</key>
					<string>meta.class.instance.constructor</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>'''</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.kal</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'''</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.kal</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.heredoc.kal</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"""</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.kal</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"""</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.kal</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.heredoc.kal</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\.</string>
							<key>name</key>
							<string>constant.character.escape.kal</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#interpolated_kal</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>`</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.kal</string>
						</dict>
					</dict>
					<key>end</key>
					<string>`</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.kal</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.script.kal</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)</string>
							<key>name</key>
							<string>constant.character.escape.kal</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!#)###(?!#)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.kal</string>
						</dict>
					</dict>
					<key>end</key>
					<string>###(?:[ \t]*\n)</string>
					<key>name</key>
					<string>comment.block.kal</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>@\w*</string>
							<key>name</key>
							<string>storage.type.annotation.kalscript</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.kal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(#)(?!\{).*$\n?</string>
					<key>name</key>
					<string>comment.line.number-sign.kal</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/{3}</string>
					<key>end</key>
					<string>/{3}[imgy]{0,4}</string>
					<key>name</key>
					<string>string.regexp.kal</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#interpolated_kal</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#embedded_comment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>/(?![\s=/*+{}?]).*?[^\\]/[igmy]{0,4}(?![a-zA-Z0-9])</string>
					<key>name</key>
					<string>string.regexp.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(break|catch|continue|else|finally|for|in|of|if|return|switch|then|throw|raise|fail\s+with|try|unless|print|except\s+when|when|while|wait\s+for|pause
						s+for|until|(?&lt;=for)\s+(parallel|series))\b</string>
					<key>name</key>
					<string>keyword.control.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\^|\*|\/|\-|\+|===|==|=|!=|!==|&lt;=|&gt;=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&lt;&gt;|&lt;|&gt;|!|&amp;&amp;|\?|\||\|\||\:|\*=|(?&lt;!\()/=|%=|\+=|\-=|\b(?&lt;![\.\$])(instanceof|new|delete|typeof|and|or|is|isnt|not|xor|exists|doesnt\s+exist|bitwise(\s+(left|right))?|)\b</string>
					<key>name</key>
					<string>keyword.operator.kal</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.assignment.kal</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.kal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([a-zA-Z\$_](\w|\$|\.)*\s*(?!\::)((:)|(=))(?!(\s*\(.*\))?\s*((=|-)&gt;)))</string>
					<key>name</key>
					<string>variable.assignment.kal</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=\s|^)([\[\{])(?=.*?[\]\}]\s+[:=])</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.kal</string>
						</dict>
					</dict>
					<key>end</key>
					<string>([\]\}]\s*[:=])</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.kal</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.variable.assignment.destructured.kal</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable_name</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#instance_variable</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#single_quoted_string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#double_quoted_string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#numeric</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.kal</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.kal</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.kal</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.kal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>((\s*)(?=[a-zA-Z\$_])([a-zA-Z\$_](\w|\$|:|\.)*\s*(?=[:=](\s*\(.*\))?\s*((=|-)&gt;))))|((?=function|method|task)\s+[a-zA-Z\$_][a-zA-Z\$_0-9]*(\s+of[a-zA-Z\$_][a-zA-Z\$_0-9]*)?)</string>
					<key>name</key>
					<string>meta.function.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>-&gt;|function|task|method</string>
					<key>name</key>
					<string>storage.type.function.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\.)(true|on|yes)(?!\s*[:=])\b</string>
					<key>name</key>
					<string>constant.language.boolean.true.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\.)(false|off|no)(?!\s*[:=])\b</string>
					<key>name</key>
					<string>constant.language.boolean.false.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\.)(null|nothing|none)(?!\s*[:=])\b</string>
					<key>name</key>
					<string>constant.language.null.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\.)(super|this|extends|me)(?!\s*[:=])\b</string>
					<key>name</key>
					<string>variable.language.kal</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.kal</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.kal</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.control.inheritance.kal</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.other.inherited-class.kal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(class\b)\s+(@?[a-zA-Z\$_][\w\.]*)?(?:\s+(inherits)\s+(from)\s+(@?[a-zA-Z\$\._][\w\.]*))?</string>
					<key>name</key>
					<string>meta.class.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(debugger|\\)\b</string>
					<key>name</key>
					<string>keyword.other.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Infinity|NaN|undefined)\b</string>
					<key>name</key>
					<string>constant.language.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\;</string>
					<key>name</key>
					<string>punctuation.terminator.statement.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,[ |\t]*</string>
					<key>name</key>
					<string>meta.delimiter.object.comma.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>meta.delimiter.method.period.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\{|\}</string>
					<key>name</key>
					<string>meta.brace.curly.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\(|\)</string>
					<key>name</key>
					<string>meta.brace.round.kal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\[|\]\s*</string>
					<key>name</key>
					<string>meta.brace.square.kal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#instance_variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#single_quoted_string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#double_quoted_string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numeric</string>
				</dict>
			</array>
		</dict>
		<key>double_quoted_string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.kal</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.kal</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.kal</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)</string>
							<key>name</key>
							<string>constant.character.escape.kal</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#interpolated_kal</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>embedded_comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.kal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\\)(#).*$\n?</string>
					<key>name</key>
					<string>comment.line.number-sign.kal</string>
				</dict>
			</array>
		</dict>
		<key>escape</key>
		<dict>
			<key>match</key>
			<string>\\[-`*_#+.!(){}\[\]\\&gt;]</string>
			<key>name</key>
			<string>constant.character.escape.markdown</string>
		</dict>
		<key>heading</key>
		<dict>
			<key>begin</key>
			<string>\G(#{1,6})(?!#)\s*(?=\S)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.heading.markdown</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>entity.name.section.markdown</string>
			<key>end</key>
			<string>\s*(#*)$\n?</string>
			<key>name</key>
			<string>markup.heading.markdown</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#inline</string>
				</dict>
			</array>
		</dict>
		<key>image-inline</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.markdown</string>
				</dict>
				<key>10</key>
				<dict>
					<key>name</key>
					<string>string.other.link.description.title.markdown</string>
				</dict>
				<key>11</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.markdown</string>
				</dict>
				<key>12</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.markdown</string>
				</dict>
				<key>13</key>
				<dict>
					<key>name</key>
					<string>string.other.link.description.title.markdown</string>
				</dict>
				<key>14</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.markdown</string>
				</dict>
				<key>15</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.markdown</string>
				</dict>
				<key>16</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.metadata.markdown</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>string.other.link.description.markdown</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.markdown</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.whitespace.markdown</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.metadata.markdown</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.link.markdown</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>markup.underline.link.image.markdown</string>
				</dict>
				<key>9</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.link.markdown</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x:
				\!							# Images start with !
				(\[)((?&lt;square&gt;[^\[\]\\]|\\.|\[\g&lt;square&gt;*+\])*+)(\])	
											# Match the link text.
				([ ])?						# Space not allowed
				(\()						# Opening paren for url
					(&lt;?)(\S+?)(&gt;?)			# The url
					[ \t]*					# Optional whitespace
					(?:
						  ((\().+?(\)))		# Match title in parens…
						| ((").+?("))		# or in quotes.
					)?						# Title is optional
					\s*						# Optional whitespace
				(\))
			 )</string>
			<key>name</key>
			<string>meta.image.inline.markdown</string>
		</dict>
		<key>image-ref</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.markdown</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>string.other.link.description.markdown</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.markdown</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.markdown</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>constant.other.reference.link.markdown</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.markdown</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\!(\[)((?&lt;square&gt;[^\[\]\\]|\\.|\[\g&lt;square&gt;*+\])*+)(\])[ ]?(\[)(.*?)(\])</string>
			<key>name</key>
			<string>meta.image.reference.markdown</string>
		</dict>
		<key>inline</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#escape</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ampersand</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#bracket</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#raw</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#bold</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#italic</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#line-break</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#image-inline</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-inline</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-inet</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-email</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#image-ref</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-ref-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-ref</string>
				</dict>
			</array>
		</dict>
		<key>instance_variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(@)([a-zA-Z_\$]\w*)?</string>
					<key>name</key>
					<string>variable.other.readwrite.instance.kal</string>
				</dict>
			</array>
		</dict>
		<key>interpolated_kal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\#\{</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.embedded.kal</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>name</key>
					<string>source.kal.embedded.source</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>italic</key>
		<dict>
			<key>begin</key>
			<string>(?x)
						(\*|_)(?=\S)								# Open
						(?=
							(
							    &lt;[^&gt;]*+&gt;							# HTML tags
							  | (?&lt;raw&gt;`+)([^`]|(?!(?&lt;!`)\k&lt;raw&gt;(?!`))`)*+\k&lt;raw&gt;
																	# Raw
							  | \\[\\`*_{}\[\]()#.!+\-&gt;]?+			# Escapes
							  | \[
								(				
								        (?&lt;square&gt;					# Named group
											[^\[\]\\]				# Match most chars
								          | \\.						# Escaped chars
								          | \[ \g&lt;square&gt;*+ \]		# Nested brackets
								        )*+
									\]
									(
										(							# Reference Link
											[ ]?					# Optional space
											\[[^\]]*+\]				# Ref name
										)
									  | (							# Inline Link
											\(						# Opening paren
												[ \t]*+				# Optional whtiespace
												&lt;?(.*?)&gt;?			# URL
												[ \t]*+				# Optional whtiespace
												(					# Optional Title
													(?&lt;title&gt;['"])
													(.*?)
													\k&lt;title&gt;
												)?
											\)
										)
									)
								)
							  | \1\1								# Must be bold closer
							  | (?!(?&lt;=\S)\1).						# Everything besides
																	# style closer
							)++
							(?&lt;=\S)\1								# Close
						)
					</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.italic.markdown</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\S)(\1)((?!\1)|(?=\1\1))</string>
			<key>name</key>
			<string>markup.italic.markdown</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>applyEndPatternLast</key>
					<integer>1</integer>
					<key>begin</key>
					<string>(?=&lt;[^&gt;]*?&gt;)</string>
					<key>end</key>
					<string>(?&lt;=&gt;)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>text.html.basic</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#escape</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ampersand</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#bracket</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#raw</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#bold</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#image-inline</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-inline</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-inet</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-email</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#image-ref</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-ref-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#link-ref</string>
				</dict>
			</array>
		</dict>
		<key>line-break</key>
		<dict>
			<key>match</key>
			<string> {2,}$</string>
			<key>name</key>
			<string>meta.dummy.line-break</string>
		</dict>
		<key>link-email</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.link.markdown</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>markup.underline.link.markdown</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.link.markdown</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(&lt;)((?:mailto:)?[-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(&gt;)</string>
			<key>name</key>
			<string>meta.link.email.lt-gt.markdown</string>
		</dict>
		<key>link-inet</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.link.markdown</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>markup.underline.link.markdown</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.link.markdown</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(&lt;)((?:https?|ftp)://.*?)(&gt;)</string>
			<key>name</key>
			<string>meta.link.inet.markdown</string>
		</dict>
		<key>link-inline</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.markdown</string>
				</dict>
				<key>10</key>
				<dict>
					<key>name</key>
					<string>string.other.link.description.title.markdown</string>
				</dict>
				<key>11</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.markdown</string>
				</dict>
				<key>12</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.markdown</string>
				</dict>
				<key>13</key>
				<dict>
					<key>name</key>
					<string>string.other.link.description.title.markdown</string>
				</dict>
				<key>14</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.markdown</string>
				</dict>
				<key>15</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.markdown</string>
				</dict>
				<key>16</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.metadata.markdown</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>string.other.link.title.markdown</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.markdown</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.whitespace.markdown</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.metadata.markdown</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.link.markdown</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>markup.underline.link.markdown</string>
				</dict>
				<key>9</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.link.markdown</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x:
				(\[)((?&lt;square&gt;[^\[\]\\]|\\.|\[\g&lt;square&gt;*+\])*+)(\])	
											# Match the link text.
				([ ])?						# Space not allowed
				(\()						# Opening paren for url
					(&lt;?)(.*?)(&gt;?)			# The url
					[ \t]*					# Optional whitespace
					(?:
						  ((\().+?(\)))		# Match title in parens…
						| ((").+?("))		# or in quotes.
					)?						# Title is optional
					\s*						# Optional whitespace
				(\))
			 )</string>
			<key>name</key>
			<string>meta.link.inline.markdown</string>
		</dict>
		<key>link-ref</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.markdown</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>string.other.link.title.markdown</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.markdown</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.begin.markdown</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>constant.other.reference.link.markdown</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.end.markdown</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\[)((?&lt;square&gt;[^\[\]\\]|\\.|\[\g&lt;square&gt;*+\])*+)(\])[ ]?(\[)([^\]]*+)(\])</string>
			<key>name</key>
			<string>meta.link.reference.markdown</string>
		</dict>
		<key>link-ref-literal</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.markdown</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>string.other.link.title.markdown</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.markdown</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.begin.markdown</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.constant.end.markdown</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\[)((?&lt;square&gt;[^\[\]\\]|\\.|\[\g&lt;square&gt;*+\])*+)(\])[ ]?(\[)(\])</string>
			<key>name</key>
			<string>meta.link.reference.literal.markdown</string>
		</dict>
		<key>list-paragraph</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G\s+(?=\S)</string>
					<key>end</key>
					<string>^\s*$</string>
					<key>name</key>
					<string>meta.paragraph.list.markdown</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#inline</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.list_item.markdown</string>
								</dict>
							</dict>
							<key>comment</key>
							<string>Match the list punctuation</string>
							<key>match</key>
							<string>^\s*([*+-]|[0-9]+\.)</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>numeric</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\$)\b((0([box])[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?(e[+\-]?[0-9]+)?))\b</string>
					<key>name</key>
					<string>constant.numeric.kal</string>
				</dict>
			</array>
		</dict>
		<key>raw</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.raw.markdown</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.raw.markdown</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(`+)([^`]|(?!(?&lt;!`)\1(?!`))`)*+(\1)</string>
			<key>name</key>
			<string>markup.raw.inline.markdown</string>
		</dict>
		<key>separator</key>
		<dict>
			<key>match</key>
			<string>\G[ ]{,3}([-*_])([ ]{,2}\1){2,}[ \t]*$\n?</string>
			<key>name</key>
			<string>meta.separator.markdown</string>
		</dict>
		<key>single_quoted_string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.kal</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.kal</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.kal</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)</string>
							<key>name</key>
							<string>constant.character.escape.kal</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>variable_name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.assignment.kal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([a-zA-Z\$_]\w*(\.\w+)*)</string>
					<key>name</key>
					<string>variable.assignment.kal</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.litkal</string>
	<key>uuid</key>
	<string>70456B1D-AC94-4E9B-81AB-426F0D1ACB86</string>
</dict>
</plist>